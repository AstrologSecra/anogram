from flask import Flask, request, jsonify
from flask_socketio import SocketIO, emit
from pywebio.platform.flask import webio_view
from pywebio import STATIC_PATH
from pywebio.input import *
from pywebio.output import *
from pywebio.session import defer_call, info as session_info, run_async, run_js
import random
import logging
import threading
import time
import os

app = Flask(__name__)
socketio = SocketIO(app)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
chat_msgs = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–æ–≤
existing_chat_ids = set()

MAX_MESSAGES_COUNT = 100

def generate_chat_id():
    while True:
        chat_id = f"{random.randint(0, 999999):06d}"
        if chat_id not in existing_chat_ids:
            existing_chat_ids.add(chat_id)
            return chat_id

def main():
    put_markdown("## üßä –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç!")

    # –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è: —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É
    action = actions("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", ["–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç", "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —á–∞—Ç—É"])

    if action == "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç":
        chat_id = generate_chat_id()
        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç —Å ID: {chat_id}")
        put_markdown(f"## –í–∞—à ID: {chat_id}")
        put_button("–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å ID", onclick=lambda: run_js(f"navigator.clipboard.writeText('{chat_id}')"))
        chat(chat_id)
    elif action == "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —á–∞—Ç—É":
        chat_id = input("–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞", required=True, placeholder="ID —á–∞—Ç–∞")
        if chat_id not in existing_chat_ids:
            toast("–ß–∞—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!", color='error')
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —á–∞—Ç—É —Å ID: {chat_id}")
            return
        logger.info(f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —á–∞—Ç—É —Å ID: {chat_id}")
        chat(chat_id)

def chat(chat_id):
    global chat_msgs
    
    if chat_id not in chat_msgs:
        chat_msgs[chat_id] = []
    
    msg_box = output()
    put_scrollable(msg_box, height=300, keep_bottom=True)

    nickname = input("–í–æ–π—Ç–∏ –≤ —á–∞—Ç", required=True, placeholder="–í–∞—à–µ –∏–º—è")

    chat_msgs[chat_id].append(('üì¢', f'`{nickname}` –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É!'))
    msg_box.append(put_markdown(f'üì¢ `{nickname}` –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É'))

    socketio.emit('chat_message', {'nickname': 'üì¢', 'message': f'`{nickname}` –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É!'}, room=chat_id)

    while True:
        data = input_group("üí≠ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", [
            input(placeholder="–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ...", name="msg"),
            actions(name="cmd", buttons=["–û—Ç–ø—Ä–∞–≤–∏—Ç—å", {'label': "–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞", 'type': 'cancel'}])
        ], validate = lambda m: ('msg', "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!") if m["cmd"] == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" and not m['msg'] else None)

        if data is None:
            break

        msg_box.append(put_markdown(f"`{nickname}`: {data['msg']}"))
        chat_msgs[chat_id].append((nickname, data['msg']))

        socketio.emit('chat_message', {'nickname': nickname, 'message': data['msg']}, room=chat_id)

    toast("–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞!")
    msg_box.append(put_markdown(f'üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{nickname}` –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç!'))
    chat_msgs[chat_id].append(('üì¢', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{nickname}` –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç!'))

    socketio.emit('chat_message', {'nickname': 'üì¢', 'message': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{nickname}` –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç!'}, room=chat_id)

    put_buttons(['–ü–µ—Ä–µ–∑–∞–π—Ç–∏'], onclick=lambda btn:run_js('window.location.reload()'))

@socketio.on('connect')
def handle_connect():
    logger.info('Client connected')

@socketio.on('disconnect')
def handle_disconnect():
    logger.info('Client disconnected')

app.add_url_rule('/', 'webio_view', webio_view(main), methods=['GET', 'POST', 'OPTIONS'])

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 8080))
    socketio.run(app, host='0.0.0.0', port=port)
